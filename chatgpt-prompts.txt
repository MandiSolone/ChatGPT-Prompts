In JavaScript, a class is a blueprint for creating objects with predefined properties and methods. Classes provide a more structured and object-oriented way to manage and organize code, making it easier to create and manipulate objects.

### Key Concepts of JavaScript Classes:

1. **Definition**:
   - A class is defined using the `class` keyword followed by the class name. The body of the class contains methods and properties.
   ```javascript
   class Person {
       constructor(name, age) {
           this.name = name;
           this.age = age;
       }

       greet() {
           console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
       }
   }
   ```

2. **Constructor**:
   - The `constructor` method is a special method for creating and initializing objects created with the class. It is called automatically when a new instance of the class is created.
   ```javascript
   let person1 = new Person('Alice', 30);
   ```

3. **Methods**:
   - Methods are functions defined inside the class. They define the behavior of the objects created from the class.
   ```javascript
   person1.greet(); // Outputs: Hello, my name is Alice and I am 30 years old.
   ```

4. **Inheritance**:
   - JavaScript classes support inheritance, allowing one class to inherit the properties and methods of another class using the `extends` keyword.
   ```javascript
   class Student extends Person {
       constructor(name, age, grade) {
           super(name, age);
           this.grade = grade;
       }

       study() {
           console.log(`${this.name} is studying in grade ${this.grade}.`);
       }
   }

   let student1 = new Student('Bob', 20, 'A');
   student1.greet();  // Outputs: Hello, my name is Bob and I am 20 years old.
   student1.study();  // Outputs: Bob is studying in grade A.
   ```

5. **Static Methods**:
   - Static methods are defined on the class itself, not on instances of the class. They are called on the class directly.
   ```javascript
   class MathUtilities {
       static square(number) {
           return number * number;
       }
   }

   console.log(MathUtilities.square(4)); // Outputs: 16
   ```

### Usage of Classes:
- **Encapsulation**: Classes help encapsulate data and functionality together, which enhances modularity and code reusability.
- **Inheritance**: Facilitates code reuse through inheritance, making it easier to create complex hierarchies of objects.
- **Readability**: Classes make the code more readable and easier to understand, especially for those familiar with object-oriented programming.

### Example:
Hereâ€™s a simple example of a class in JavaScript:
```javascript
class Car {
    constructor(brand, model) {
        this.brand = brand;
        this.model = model;
    }

    displayInfo() {
        console.log(`Car: ${this.brand} ${this.model}`);
    }
}

let myCar = new Car('Toyota', 'Corolla');
myCar.displayInfo(); // Outputs: Car: Toyota Corolla
```

### Resources:
- [MDN Web Docs on Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)
- [JavaScript.info on Classes](https://javascript.info/class)

Classes in JavaScript provide a powerful way to structure and organize code, leveraging the principles of object-oriented programming to create robust and maintainable applications.